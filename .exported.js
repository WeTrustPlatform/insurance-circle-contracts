module.exports = {"InsurCircle":{"abi":[{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"members","outputs":[{"name":"credit","type":"uint256"},{"name":"debit","type":"uint256"},{"name":"alive","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"MAX_MEMBER","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"EXPIRED_IN","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"tokenContract","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"membersAddresses","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"organizer","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"startTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"safetyHatchTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"tokenContractAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"endOfROSCA","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"roundPeriodInSecs","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"VERSION","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"tokenContractAddress_","type":"address"},{"name":"organizer_","type":"address"},{"name":"roundPeriodInSecs_","type":"uint256"},{"name":"startTime_","type":"uint256"},{"name":"contributionSize_","type":"uint128"},{"name":"members_","type":"address[]"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"user","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"LogContributionMade","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"user","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"LogFundsWithdrawal","type":"event"},{"anonymous":false,"inputs":[],"name":"LogEndOfROSCA","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"user","type":"address"}],"name":"LogDisabledMember","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"user","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Claimed","type":"event"},{"constant":false,"inputs":[],"name":"payForRound","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"toMember","type":"address"},{"name":"value","type":"uint256"}],"name":"transfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"closeCircle","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"user","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"aMember","type":"address"}],"name":"disableMember","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"claim","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x60806040526000600760146101000a81548160ff0219169083151502179055503480156200002c57600080fd5b5060405162002b6438038062002b64833981018060405260c08110156200005257600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080516401000000008111156200009d57600080fd5b82810190506020810184811115620000b457600080fd5b8151856020820283011164010000000082111715620000d257600080fd5b505092919050505060008414158015620000ed575060018151115b8015620000fd5750610100815111155b62000170576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f436f6e7374727563746f72206e6f7420706173732076616c69646174696f6e0081525060200191505060405180910390fd5b846000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550836003819055508260048190555081600560006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555085600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080905060008090505b82518160ff1610156200031d57828160ff1681518110620002a157fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415620002e757600191506200031d565b6200030f838260ff1681518110620002fb57fe5b6020026020010151620003b560201b60201c565b808060010191505062000284565b506301dfe200600454016008819055506000151581151514620003a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f4f7267616e697a6572206d757374206e6f742062652061206d656d626572000081525060200191505060405180910390fd5b505050505050506200061e565b80600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200045a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f4e6f74206163636570742061646472657373205a65726f00000000000000000081525060200191505060405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16156200051e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f557365722077617320616c72656479207265676973746572656400000000000081525060200191505060405180910390fd5b6040518060600160405280600081526020016000815260200160011515815250600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff02191690831515021790555090505060028290806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b612536806200062e6000396000f3fe6080604052600436106101145760003560e01c806361203265116100a057806385860a701161006457806385860a70146104be578063a9059cbb146104ed578063c941778314610548578063e7c140aa14610573578063ffa1ad741461058a57610114565b8063612032651461035557806370a08231146103ac57806378e979251461041157806380a46cbe1461043c57806382edaf941461046757610114565b80633721b133116100e75780633721b133146101f05780634e71d92d1461021b57806355a373d6146102325780635918ba79146102895780635ee5a3c6146102da57610114565b806308ae4b0c1461011957806312065fe0146101905780632443b8c5146101bb57806329c404fa146101c5575b600080fd5b34801561012557600080fd5b506101686004803603602081101561013c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061061a565b6040518084815260200183815260200182151515158152602001935050505060405180910390f35b34801561019c57600080fd5b506101a5610651565b6040518082815260200191505060405180910390f35b6101c36107ab565b005b3480156101d157600080fd5b506101da6109b0565b6040518082815260200191505060405180910390f35b3480156101fc57600080fd5b506102056109b6565b6040518082815260200191505060405180910390f35b34801561022757600080fd5b506102306109be565b005b34801561023e57600080fd5b50610247610fc7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561029557600080fd5b506102d8600480360360208110156102ac57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fed565b005b3480156102e657600080fd5b50610313600480360360208110156102fd57600080fd5b810190808035906020019092919050505061128b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561036157600080fd5b5061036a6112c7565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156103b857600080fd5b506103fb600480360360208110156103cf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112ec565b6040518082815260200191505060405180910390f35b34801561041d57600080fd5b5061042661143e565b6040518082815260200191505060405180910390f35b34801561044857600080fd5b50610451611444565b6040518082815260200191505060405180910390f35b34801561047357600080fd5b5061047c61144a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104ca57600080fd5b506104d3611470565b604051808215151515815260200191505060405180910390f35b3480156104f957600080fd5b506105466004803603604081101561051057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611483565b005b34801561055457600080fd5b5061055d6116f1565b6040518082815260200191505060405180910390f35b34801561057f57600080fd5b506105886116f7565b005b34801561059657600080fd5b5061059f611c59565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105df5780820151818401526020810190506105c4565b50505050905090810190601f16801561060c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60016020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900460ff16905083565b600080600073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161490508061078c57600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561074c57600080fd5b505afa158015610760573d6000803e3d6000fd5b505050506040513d602081101561077657600080fd5b81019080805190602001909291905050506107a5565b3073ffffffffffffffffffffffffffffffffffffffff16315b91505090565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1661086d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4f6e6c79206d656d626572732063616e2061636365737320746869732e00000081525060200191505060405180910390fd5b600760149054906101000a900460ff16156108f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f436972636c6520697320656e646564000000000000000000000000000000000081525060200191505060405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600061093d611c92565b90508082600001600082825401925050819055506301dfe20042016008819055503373ffffffffffffffffffffffffffffffffffffffff167f5f811115c4ec5f41d18478505468d01b829326546e0ff4d150a9f9d8d2621cd4826040518082815260200191505060405180910390a25050565b61010081565b6301dfe20081565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16610a80576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4f6e6c79206d656d626572732063616e2061636365737320746869732e00000081525060200191505060405180910390fd5b600760149054906101000a900460ff1615610b03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f436972636c6520697320656e646564000000000000000000000000000000000081525060200191505060405180910390fd5b600854421015610b5e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806123e26026913960400191505060405180910390fd5b6000809050600080600090505b6002805490508160ff161015610e3757610b836123be565b6001600060028460ff1681548110610b9757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff161515151581525050905080604001518015610c8b57506000610c8960028460ff1681548110610c5957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166112ec565b135b15610ce057610cd360028360ff1681548110610ca357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166112ec565b8301925083806001019450505b3373ffffffffffffffffffffffffffffffffffffffff1660028360ff1681548110610d0757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610e29578060400151610dc5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4d656d626572206973206e6f7420616c6976650000000000000000000000000081525060200191505060405180910390fd5b6000816020015182600001510311610e28576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e815260200180612483603e913960400191505060405180910390fd5b5b508080600101915050610b6b565b506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000610e85610651565b905060018460ff161415610f1157610e9d3382612066565b60008260020160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a826040518082815260200191505060405180910390a250505050610fc5565b6000826001015483600001540390506000610f4785610f3984866122a990919063ffffffff16565b61232f90919063ffffffff16565b9050610f533382612066565b60008460020160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a826040518082815260200191505060405180910390a25050505050505b565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110af576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4f6e6c79206f7267616e697a65722063616e2061636365737320746869732e0081525060200191505060405180910390fd5b600760149054906101000a900460ff1615611132576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f436972636c6520697320656e646564000000000000000000000000000000000081525060200191505060405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166111d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806124e66025913960400191505060405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160020160006101000a81548160ff0219169083151502179055506301dfe20042016008819055508173ffffffffffffffffffffffffffffffffffffffff167f554fead64278c38cff1d7ef4532444c7aab23166d2f04be05f7931ce046598be60405160405180910390a25050565b6002818154811061129857fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff166113b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f55736572206973206e6f742061637469766520616e796d6f726500000000000081525060200191505060405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154039050919050565b60045481565b60085481565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4f6e6c79206f7267616e697a65722063616e2061636365737320746869732e0081525060200191505060405180910390fd5b600760149054906101000a900460ff16156115c8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f436972636c6520697320656e646564000000000000000000000000000000000081525060200191505060405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff1661166d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806124c16025913960400191505060405180910390fd5b600081116116e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f56616c756520746f207472616e73666572206d7573742067742030000000000081525060200191505060405180910390fd5b6116ed8282612066565b5050565b60035481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146117b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4f6e6c79206f7267616e697a65722063616e2061636365737320746869732e0081525060200191505060405180910390fd5b600760149054906101000a900460ff161561183c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f436972636c6520697320656e646564000000000000000000000000000000000081525060200191505060405180910390fd5b606061010060405190808252806020026020018201604052801561186f5781602001602082028038833980820191505090505b50905060008090506000611881610651565b905060008114156118db576001600760146101000a81548160ff0219169083151502179055507f0d7934a837a5352bf1f69c845e9630af79985e92d48ac8f7c684cadbcc56fe3e60405160405180910390a1505050611c57565b600080600090505b6002805490508160ff161015611adb576118fb6123be565b6001600060028460ff168154811061190f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff161515151581525050905080604001516119bf5750611ace565b60028260ff16815481106119cf57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868660ff1681518110611a0957fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505084806001019550506001600060028460ff1681548110611a5f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015483019250505b80806001019150506118e3565b5060008090505b8360ff168160ff161015611c0a57600060016000878460ff1681518110611b0557fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506001850360ff168260ff161015611bc4576000816001015482600001540390506000611b9085611b8284896122a990919063ffffffff16565b61232f90919063ffffffff16565b90506000811115611bbc57611bbb888560ff1681518110611bad57fe5b602002602001015182611483565b5b505050611bfd565b6000611bce610651565b90506000811115611bfa57611bf9878460ff1681518110611beb57fe5b602002602001015182611483565b5b50505b8080600101915050611ae2565b506001600760146101000a81548160ff0219169083151502179055507f0d7934a837a5352bf1f69c845e9630af79985e92d48ac8f7c684cadbcc56fe3e60405160405180910390a1505050505b565b6040518060400160405280600581526020017f302e302e3100000000000000000000000000000000000000000000000000000081525081565b600080600073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161490508080611cf6575060003411155b611d4b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806124406022913960400191505060405180910390fd5b600081611e6557600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015611e2557600080fd5b505afa158015611e39573d6000803e3d6000fd5b505050506040513d6020811015611e4f57600080fd5b8101908080519060200190929190505050611e67565b345b90506000811415611ee0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f56616c75652073686f756c64206265206774203000000000000000000000000081525060200191505060405180910390fd5b8115611ef0578092505050612063565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b158015611fcd57600080fd5b505af1158015611fe1573d6000803e3d6000fd5b505050506040513d6020811015611ff757600080fd5b810190808051906020019092919050505061205d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260388152602001806124086038913960400191505060405180910390fd5b80925050505b90565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905081816001016000828254019250508190555060008073ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161490508015612162578373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505015801561215c573d6000803e3d6000fd5b50612248565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561220b57600080fd5b505af115801561221f573d6000803e3d6000fd5b505050506040513d602081101561223557600080fd5b8101908080519060200190929190505050505b6301dfe20042016008819055508373ffffffffffffffffffffffffffffffffffffffff167f734fcf7bef4b986ceeebbdc8134aaa082aa17a4c7309655da456b33ebe598abb846040518082815260200191505060405180910390a250505050565b6000808314156122bc5760009050612329565b60008284029050828482816122cd57fe5b0414612324576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806124626021913960400191505060405180910390fd5b809150505b92915050565b60008082116123a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525060200191505060405180910390fd5b60008284816123b157fe5b0490508091505092915050565b60405180606001604052806000815260200160008152602001600015158152509056fe4e6f74206174207468652072696768742074696d6520666f7220736166657479206861746368546f6b656e20636f6e74726163742073686f756c6420616c6c6f7720746f207472616e7366657220746f207468697320636f6e7472616374746f6b656e20436972636c652073686f756c64206e6f742061636365707420455448536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7743726564697420616d6f756e74206f66206d656d6265722073686f756c64206265206774207468616e206869732f68657220646562697420616d6f756e744f7267616e697a65722063616e207472616e7366657220746f206d656d626572206f6e6c7955736572206973206e6f74206163746976652c20756e61626c6520746f2064697361626c65a165627a7a72305820b8febb74f92d10a4649a461ffdfb8800e2a599a63ba69001dd5a5e2ffefe5ef60029","sourceMap":"97:9179:0:-;;;748:5;723:30;;;;;;;;;;;;;;;;;;;;1678:1059;8:9:-1;5:2;;;30:1;27;20:12;5:2;1678:1059:0;;;;;;;;;;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;1678:1059:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;71:11;66:3;62:21;55:28;;123:4;118:3;114:14;159:9;141:16;138:31;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;261:11;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;0:373;;1678:1059:0;;;;;;1994:1;1972:18;:23;;:46;;;;;2017:1;1999:8;:15;:19;1972:46;:79;;;;;237:3;2022:8;:15;:29;;1972:79;1964:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2109:10;2097:9;;:22;;;;;;;;;;;;;;;;;;2149:18;2129:17;:38;;;;2189:10;2177:9;:22;;;;2228:17;2209:16;;:36;;;;;;;;;;;;;;;;;;2291:21;2255:13;;:58;;;;;;;;;;;;;;;;;;2346:21;2323:20;;:44;;;;;;;;;;;;;;;;;;2377:12;2392:5;2377:20;;2412:7;2422:1;2412:11;;2407:205;2429:8;:15;2425:1;:19;;;2407:205;;;2483:8;2492:1;2483:11;;;;;;;;;;;;;;;;2469:25;;:10;:25;;;2465:101;;;2524:4;2514:14;;2546:5;;2465:101;2579:22;2589:8;2598:1;2589:11;;;;;;;;;;;;;;;;2579:9;;;:22;;:::i;:::-;2446:3;;;;;;;2407:205;;;;283:8;2639:9;;:22;2621:15;:40;;;;2690:5;2679:16;;:7;:16;;;2671:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1678:1059;;;;;;;97:9179;;7893:280;7967:9;1624:1;1605:21;;:7;:21;;;;1597:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7997:7;:18;8005:9;7997:18;;;;;;;;;;;;;;;:24;;;;;;;;;;;;7996:25;7988:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8084:40;;;;;;;;8098:1;8084:40;;;;8108:1;8084:40;;;;8118:4;8084:40;;;;;8063:7;:18;8071:9;8063:18;;;;;;;;;;;;;;;:61;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8134:16;8156:9;8134:32;;39:1:-1;33:3;27:10;23:18;57:10;52:3;45:23;79:10;72:17;;0:93;8134:32:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7893:280;;:::o;97:9179::-;;;;;;;","source":"pragma solidity ^0.5.2;\n\nimport \"./deps/ERC20TokenInterface.sol\";\nimport \"./deps/SafeMath.sol\";\n\ncontract InsurCircle {\n    using SafeMath for uint256;\n\n    string public constant VERSION = \"0.0.1\";\n    uint public constant MAX_MEMBER = 256;\n    uint256 public constant EXPIRED_IN = 52 weeks;\n    address payable public organizer;\n    mapping(address => User) public members;\n    address payable[] public membersAddresses;  // for iterating through members' addresses\n\n    uint256 public roundPeriodInSecs;\n    uint256 public startTime;\n    uint128 internal contributionSize;\n    ERC20TokenInterface public tokenContract;  // public - allow easy verification of token contract.\n    address public tokenContractAddress;\n    bool public endOfROSCA = false;\n    uint256 public safetyHatchTime;\n\n    event LogContributionMade(address indexed user, uint256 amount);\n    event LogFundsWithdrawal(address indexed user, uint256 amount);\n    event LogEndOfROSCA();\n    event LogDisabledMember(address indexed user);\n    event Claimed(address indexed user, uint256 value);\n\n    struct User {\n        uint256 credit;  // total amount user has contributed\n        uint256 debit; // total amount user has withdrawed/borrowed\n        bool alive; // needed to check if a member is indeed a member\n    }\n\n    modifier onlyOrganizer {\n        require(msg.sender == organizer, \"Only organizer can access this.\");\n        _;\n    }\n\n    modifier onlyFromMember {\n        require(members[msg.sender].alive, \"Only members can access this.\");\n        _;\n    }\n\n    modifier onlyNonZeroAddress(address toCheck) {\n        require(toCheck != address(0), \"Not accept address Zero\");\n        _;\n    }\n\n    constructor(\n          address tokenContractAddress_,  // pass 0 to use ETH\n          address payable organizer_,\n          uint256 roundPeriodInSecs_,\n          uint256 startTime_,\n          uint128 contributionSize_,\n          address payable[] memory members_\n    ) public {\n        require(roundPeriodInSecs_ != 0 && members_.length > 1 && members_.length <= MAX_MEMBER, \"Constructor not pass validation\");\n        organizer = organizer_;\n        roundPeriodInSecs = roundPeriodInSecs_;\n        startTime = startTime_;\n        contributionSize = contributionSize_;\n        tokenContract = ERC20TokenInterface(tokenContractAddress_);\n        tokenContractAddress = tokenContractAddress_;\n        bool isFound = false;\n        for (uint8 i = 0; i < members_.length; i++) {\n            if (organizer_ == members_[i]) {\n                isFound = true;\n                break;\n            }\n            addMember(members_[i]);\n        }\n        safetyHatchTime = startTime + EXPIRED_IN;\n        require(isFound == false, \"Organizer must not be a member\");\n    }\n\n    /**\n     * Member contribution, increase credit.\n     */\n    function payForRound() external payable onlyFromMember {\n        require(!endOfROSCA, \"Circle is ended\");\n        User storage member = members[msg.sender];\n        uint256 value = validateAndReturnContribution();\n        member.credit += value;\n        safetyHatchTime = now + EXPIRED_IN;\n        emit LogContributionMade(msg.sender, value);\n    }\n\n    /**\n     * Only organizer can transfer to member.\n     */\n    function transfer(address payable toMember, uint256 value) public onlyOrganizer {\n        require(!endOfROSCA, \"Circle is ended\");\n        require(members[toMember].alive, \"Organizer can transfer to member only\");\n        require(value > 0, \"Value to transfer must gt 0\");\n        doTransfer(toMember, value);\n    }\n\n    /**\n     * Only organizer can close the circle.\n     */\n    function closeCircle() external onlyOrganizer {\n        require(!endOfROSCA, \"Circle is ended\");\n        address payable[] memory eligibleMembers = new address payable[](MAX_MEMBER);\n        uint8 numEligible = 0;\n        uint256 contractBalance = getBalance();\n\n        if (contractBalance == 0) {\n            endOfROSCA = true;\n            emit LogEndOfROSCA();\n            return;\n        }\n\n        // real balance in the contract is lte max balance\n        uint256 maxBalance;\n        for (uint8 i = 0; i < membersAddresses.length; i++) {\n            User memory member = members[membersAddresses[i]];\n            if (!member.alive) {\n                continue;\n            }\n            eligibleMembers[numEligible] = membersAddresses[i];\n            numEligible++;\n            maxBalance += members[membersAddresses[i]].credit;\n        }\n        for (uint8 i = 0; i < numEligible; i++) {\n            User storage member = members[eligibleMembers[i]];\n            if (i < numEligible - 1) {\n                uint256 memberBalance = member.credit - member.debit;\n                uint256 value = contractBalance.mul(memberBalance).div(maxBalance);\n                if (value > 0) {\n                    transfer(eligibleMembers[i], value);\n                }\n                continue;\n            }\n            // Last member should take his/her remmaining money in the contract\n            uint256 value = getBalance();\n            if (value > 0) {\n                transfer(eligibleMembers[i], value);\n            }\n        }\n        endOfROSCA = true;\n        emit LogEndOfROSCA();\n    }\n\n    /**\n     * Returns the balance of this contract, in ETH or the ERC20 token involved.\n     */\n    function getBalance() public view returns (uint256) {\n        bool isEthCircle = (tokenContractAddress == address(0));\n        return isEthCircle ? address(this).balance : tokenContract.balanceOf(address(this));\n    }\n\n    /**\n     * Return balance of a member.\n     */\n    function balanceOf(address user) public view returns (int256) {\n        require(members[user].alive, \"User is not active anymore\");\n        return int256(members[user].credit - members[user].debit);\n    }\n\n    /**\n     * If a member wants to quit, he needs to request organizer to do this.\n     */\n    function disableMember(address payable aMember) external onlyOrganizer {\n        require(!endOfROSCA, \"Circle is ended\");\n        require(members[aMember].alive, \"User is not active, unable to disable\");\n        User storage member = members[aMember];\n        member.alive = false;\n        safetyHatchTime = now + EXPIRED_IN;\n        emit LogDisabledMember(aMember);\n    }\n\n    function claim() external onlyFromMember {\n        require(!endOfROSCA, \"Circle is ended\");\n        require(now >= safetyHatchTime, \"Not at the right time for safety hatch\");\n        // if this is the last user, withdraw the remaining balance\n        uint8 numPositiveBalanceUser = 0;\n        // real balance in the contract is lte max balance\n        uint256 maxBalance;\n        for (uint8 i = 0; i < membersAddresses.length; i++) {\n            User memory member = members[membersAddresses[i]];\n            if (member.alive && balanceOf(membersAddresses[i]) > 0) {\n                maxBalance += uint256(balanceOf(membersAddresses[i]));\n                numPositiveBalanceUser++;\n            }\n            if (membersAddresses[i] == msg.sender) {\n                require(member.alive, \"Member is not alive\");\n                require(member.credit - member.debit > 0, \"Credit amount of member should be gt than his/her debit amount\");\n            }\n        }\n        // after the above for loop, user is eligible to claim\n        User storage member = members[msg.sender];\n        uint256 contractBalance = getBalance();\n        if (numPositiveBalanceUser == 1) {\n            doTransfer(msg.sender, contractBalance);\n            member.alive = false;\n            emit Claimed(msg.sender, contractBalance);\n            return;\n        }\n\n        // else withdraw based on ratio\n        uint256 memberBalance = member.credit - member.debit;\n        uint256 available = contractBalance.mul(memberBalance).div(maxBalance);\n        doTransfer(msg.sender, available);\n        member.alive = false;\n        emit Claimed(msg.sender, available);\n    }\n\n    function addMember(address payable newMember) internal onlyNonZeroAddress(newMember) {\n        require(!members[newMember].alive, \"User was alredy registered\");\n\n        members[newMember] = User({credit: 0, debit: 0, alive: true});\n        membersAddresses.push(newMember);\n    }\n\n    function validateAndReturnContribution() internal returns (uint256) {  // dontMakePublic\n        bool isEthCircle = (tokenContractAddress == address(0));\n        require(isEthCircle || msg.value <= 0, \"token Circle should not accept ETH\");\n\n        uint256 value = (isEthCircle ? msg.value : tokenContract.allowance(msg.sender, address(this)));\n        require(value != 0, \"Value should be gt 0\");\n\n        if (isEthCircle) {\n            return value;\n        }\n        require(tokenContract.transferFrom(msg.sender, address(this), value), \"Token contract should allow to transfer to this contract\");\n        return value;\n    }\n\n    function doTransfer(address payable toMember, uint256 value) internal {\n        User storage member = members[toMember];\n        member.debit += value;\n        bool isEthCircle = (tokenContractAddress == address(0));\n        if (isEthCircle) {\n            toMember.transfer(value);\n        } else {\n            tokenContract.transfer(toMember, value);\n        }\n        safetyHatchTime = now + EXPIRED_IN;\n        emit LogFundsWithdrawal(toMember, value);\n    }\n}","compiler":{"name":"solc","version":"0.5.8+commit.23d335f2.Emscripten.clang"},"schemaVersion":"3.0.16"}};